@page "/map"

@using OpenLayers.Blazor
@using MyGeoApplication.Services
@using Radzen
@using Radzen.Blazor
@using MarkerType = OpenLayers.Blazor.MarkerType
@using MyGeoApplication.Data
@using NetTopologySuite.Geometries
@using Coordinate = OpenLayers.Blazor.Coordinate
@using Point = NetTopologySuite.Geometries.Point
@using Database.Entities

<style>
    .marker {
        background-color: #ff9800;
        color: white;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.3);
    }
  
    .marker-title {
        font-size: 20px;
        margin-bottom: 5px;
    }

    .marker-coordinates {
        font-size: 14px;
    }
</style>

<RadzenDialog/>
<RadzenNotification/>
<RadzenTooltip/>

<PageTitle>Map</PageTitle>

<h2>Map of @_name</h2>

<div style="margin-bottom: 10px">
    <RadzenButton Text="Ближайшая школа" Click="@CalcNearestSchool" ButtonStyle="ButtonStyle.Light" Disabled="@(_selectedPoint is null)"/>
    <RadzenButton Text="Школы" ButtonStyle="ButtonStyle.Primary" Click="OnSchoolsValueChanged"/>

    <RadzenButton Text="Сборс" ButtonStyle="ButtonStyle.Danger" Click="ResetAsync"/>
</div>

<OpenStreetMap @ref="_map" Style="height:600px;" Class="card mb-2" @bind-Center="_center" OnClick="@OnMapClick" AutoPopup>
    <Popup>
        <div id="popup" class="ol-box">
            @if (context is Marker marker)
            {
                <div class="marker">
                    <h3 class="marker-title">@marker.Title</h3>
                    <p class="marker-coordinates">@marker.Coordinate.X / @marker.Coordinate.Y</p>
                </div>
            }
        </div>
    </Popup>
</OpenStreetMap>

<RadzenCard Style="width: 400px" Class="mb-4" Visible="@(_nearestSchool is not null)">
    <h4 style="text-transform: uppercase; font-weight: bold; color: #3366ff;">
        @_nearestSchool.Name
    </h4>
    <div>
        <p style="font-weight: bold; color: #100;">
            Description: 
        </p>
        <p>
            @_nearestSchool.Description
        </p>
        <p style="font-weight: bold; color: #100;">
            Address: 
        </p>
        <p>
            @_nearestSchool.Address
        </p>
        <p style="font-weight: bold; color: #100;">
            Address Comment: 
        </p>
        <p>
            @_nearestSchool.AddressComment
        </p>
        <p style="font-weight: bold; color: #100;">
            Rating:
        </p>
        <p>
            @(_nearestSchool.Rating != null ? _nearestSchool.Rating.ToString() : "")
        </p>
        <p style="font-weight: bold; color: #100;">
            Location: 
        </p>
        <p>
            @(_nearestSchool.Location != null ? _nearestSchool.Location.ToString() : "")
        </p>
        <p style="font-weight: bold; color: #100;">
            Mail Index: 
        </p>
        <p>
            @_nearestSchool.MailIndex
        </p>
        <p style="font-weight: bold; color: #100;">
            District: 
        </p>
        <p>
            @_nearestSchool.District
        </p>
        <p style="font-weight: bold; color: #100;">
            Working Hours: 
        </p>
        <p>
            @_nearestSchool.WorkingHours
        </p>
    </div>
</RadzenCard>

@code{
    [Inject] NotificationService Notifications { get; set; }
    [Inject] ICityService CityService { get; set; }
    [Inject] ISchoolsService SchoolsService { get; set; }
    
    private Coordinate _center = new(0, 0);
    private OpenStreetMap _map;
    private string? _name;
    private bool _showSchools;
    private CityInfo _selectedCity;
    private List<Marker> _schoolsMarkers = new List<Marker>();
    private Marker? _selectedPoint;
    private RadzenCheckBox<bool> _schoolCheckBox;
    private Marker? _nearestSchoolMarker;
    private SchoolEntity? _nearestSchool;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender) return;
        try
        {
            _selectedCity = await CityService.GetCityByIdAsync("00000000-0000-0000-0000-000000000001");
            
            _name = _selectedCity.Name;
            _center = new Coordinate(_selectedCity.Center.X, _selectedCity.Center.Y);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Notifications.Notify(NotificationSeverity.Error, "Could not get SPB");
            Console.WriteLine(e);
        }
        _showSchools = true;
        await ToggleSchoolMarkersAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSchoolsValueChanged()
    {
        _showSchools = !_showSchools;
        await ToggleSchoolMarkersAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ToggleSchoolMarkersAsync()
    {
        var schools = await SchoolsService.GetSchoolListByCityId(_selectedCity.ExternalId);
        if (_showSchools)
        {
            var markers = schools.Select(s => new Marker(
                new Coordinate(s.Location.X, s.Location.Y),
                "images/high-school-icon-png.png", 414, 602, 414, 602)
            { Scale = 0.1, Popup = true, Title = s.Name });
            foreach (var marker in markers)
            {
                _map.MarkersList.Add(marker);
                _schoolsMarkers.Add(marker);
            }
        }
        else
        {
            foreach (var marker in _schoolsMarkers)
            {
                _map.MarkersList.Remove(marker);
            }

            _schoolsMarkers = new List<Marker>();
        }
    }
    
    private async Task OnMapClick(Coordinate coordinate)
    {
        if (_selectedPoint != null)
            _map.MarkersList.Remove(_selectedPoint);
        
        _selectedPoint = new Marker(MarkerType.MarkerPin, coordinate, "Выбранная точка");
        _map.MarkersList.Add(_selectedPoint);
    }

    private async Task CalcNearestSchool()
    {
        _nearestSchool = await SchoolsService.GetNearestSchool(new Point(_selectedPoint.Point.X, _selectedPoint.Point.Y));
        if(_nearestSchoolMarker != null)
            _map.MarkersList.Remove(_nearestSchoolMarker);
        _nearestSchoolMarker = new Marker(
            new Coordinate(_nearestSchool.Location.X, _nearestSchool.Location.Y),
            "images/special-high-school-icon-png.png", 414, 602, 414, 602)
        { Scale = 0.1, Popup = true, Title = "Ближайшая школа!" };
        _map.MarkersList.Add(_nearestSchoolMarker);
    }

    private async Task ResetAsync()
    {
        // Reset nearest School
        _map.MarkersList.Remove(_nearestSchoolMarker);
        _nearestSchool = null;
        
        // Delete selected marker
        _map.MarkersList.Remove(_selectedPoint);
        _selectedPoint = null;
        
        // StateHasChanged();
    }
}