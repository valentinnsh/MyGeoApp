@page "/map"

@using OpenLayers.Blazor
@using MyGeoApplication.Services
@using Radzen
@using Radzen.Blazor
@using MarkerType = OpenLayers.Blazor.MarkerType

<RadzenDialog/>
<RadzenNotification/>
<RadzenTooltip/>

<PageTitle>Map</PageTitle>

<h2>Map of @_name</h2>

<div style="margin-bottom: 10px">
    <RadzenButton Text="Add Points" Click="@OnPointAddAsync" ButtonStyle="ButtonStyle.Secondary"/>
    <RadzenButton Text="Delete Points" Click="@OnPointDelAsync" ButtonStyle="ButtonStyle.Danger"/>
</div>
@*<Map
    height="600px"
    @ref="_map"
    Options="_mapOptions"
    onMapDblClick ="@OnMapDblClickAsync"
    GeoJSON_urls="@_geojsonUrls.ToArray()"
></Map>*@

<OpenStreetMap @ref="_map" Style="height:600px;" Class="card mb-2" @bind-Center="_center">
</OpenStreetMap>

@code{
    [Inject] NotificationService Notifications { get; set; }
    [Inject] ICityService CityService { get; set; }

    private Coordinate _center = new(0, 0);
    private OpenStreetMap _map;
    private string? _name;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender) return;
        try
        {
            var defaultCity = await CityService.GetCityByIdAsync("00000000-0000-0000-0000-000000000001");
            
            _name = defaultCity.Name;
            _center = new Coordinate(defaultCity.Center.X, defaultCity.Center.Y);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Notifications.Notify(NotificationSeverity.Error, "Could not get SPB");
            Console.WriteLine(e);
        }
    }

    private async Task OnPointAddAsync()
    {
        if(_map.MarkersList.Count < 1)
            _map.MarkersList.Add(new Marker(MarkerType.MarkerFlag, new Coordinate(30.345487, 59.945676), "Title 1"));
        else
        {
            _map.MarkersList.Add(new Marker(MarkerType.MarkerFlag, new Coordinate(30.345489, 59.945476), "Title NEW"));
        }
        await InvokeAsync(StateHasChanged);
        Notifications.Notify(NotificationSeverity.Success, "Added some data?");
    }

    private async Task OnPointDelAsync()
    {
        if(_map.MarkersList.Count > 1)
            _map.MarkersList.RemoveAt(_map.MarkersList.Count-1);
        Notifications.Notify(NotificationSeverity.Info, $"Deleting pont");
    }

    /*private Task OnMapDblClickAsync(Map.CurrentMapState state)
    {
        Notifications.Notify(NotificationSeverity.Success, $"Map clicked! {state.location.latitude} {state.location.longitude}");
        return Task.CompletedTask;
    }*/

}