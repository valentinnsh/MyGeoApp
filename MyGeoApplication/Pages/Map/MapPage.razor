@page "/map"
@using LeafletForBlazor
@using Radzen
@using Radzen.Blazor

<RadzenDialog/>
<RadzenNotification/>
<RadzenTooltip/>

<PageTitle>Map</PageTitle>

<h2>Map</h2>

<div style="margin-bottom: 10px">
    <RadzenButton Text="Add Points" Click="@OnPointAddAsync" ButtonStyle="ButtonStyle.Secondary"/>
    <RadzenButton Text="Delete Points" Click="@OnPointDelAsync" ButtonStyle="ButtonStyle.Danger"/>
</div>

@*<RealTimeMap 
    height="600px"
    @ref="_realTimeMap" 
    Parameters="_realTimeMapParameters"
    onMapClick="@OnMapDblClickAsync"
></RealTimeMap>*@

<Map
    height="600px"
    @ref="_map"
    Parameters="_mapParameters"
    Options="_mapOptions"
    onMapDblClick ="@OnMapDblClickAsync"
></Map>

@code{
    [Inject] NotificationService Notifications { get; set; }

    private RealTimeMap _realTimeMap;	//reference to control
    private Map _map;
    
    readonly List<RealTimeMap.StreamPoint> _points = new List<RealTimeMap.StreamPoint>
    {
        new ()
        {
            guid = Guid.NewGuid(),
            latitude = 59.948676,
            longitude = 30.344487,
            type = "type 1",
            value = "a point-specific value",
        }, 
        new ()
        {
            guid = Guid.NewGuid(),
            latitude = 59.945676,
            longitude = 30.345487,
            type = "type 2",
            value = "another value"
        }
    };

    private async Task OnPointAddAsync()
    {
        await _realTimeMap.Geometric.Points.upload(_points, true);
        Notifications.Notify(NotificationSeverity.Success, string.Join(", ", _points.Select(_ => _.guid.ToString())));
        // _realTimeMap.Geometric.Points.
    }

    private async Task OnPointDelAsync()
    {
        Notifications.Notify(NotificationSeverity.Info, $"Deleting pont {_points[0].guid.ToString()}");
        await _realTimeMap.Geometric.Points.delete(_points[0].guid.ToString());
    }

    private async Task OnMapDblClickAsync(Map.CurrentMapState state)
    {
        Notifications.Notify(NotificationSeverity.Success, $"Map clicked! {state.location.latitude} {state.location.longitude}");
    }
    
    private RealTimeMap.LoadParameters _realTimeMapParameters = new ()
    {
        location = new RealTimeMap.Location()
        {
            latitude = 59.938676,
            longitude = 30.314487
        },
        zoom_level = 12
    };
    
    private readonly Map.LoadParameters _mapParameters = new ()
    {
        location = new Map.Location()
        {
            latitude = 59.938676,
            longitude = 30.314487
        },
        zoom_level = 12
    };

    private readonly Map.MapOptions _mapOptions = new()
    {
        interaction_options = new Map.InteractionOptions()
        {
            doubleClickZoom = false
        }
    };

}