@using Radzen
@using Radzen.Blazor
@using Database.Entities
@using Database
@using System.Linq.Dynamic.Core
@using Microsoft.EntityFrameworkCore
@using MyGeoApplication.Services
@page "/schools"



<RadzenDialog/>
<RadzenNotification/>
<RadzenTooltip/>

<PageTitle>Schools</PageTitle>

<div class="tool-panel">
    <RadzenButton Text="Add" ButtonStyle="ButtonStyle.Primary" Click="@OnAddSchoolOpen"/>
    <RadzenButton Text="Export to Csv" ButtonStyle="ButtonStyle.Light" Click="@OnExportToCSV"/>
</div>

<RadzenDataGrid
    TItem="OrganizationEntity"
    @ref="_grid"
    Data="@_schools"
    Count="@_count"
    IsLoading="@isLoading"
    LoadData="@LoadData"
    AllowPaging="true"
    AllowFiltering="true"
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
    <EmptyTemplate>
        @CommonFragments.EmptyGridContent
    </EmptyTemplate>
    <Template Context="item">
        <div class="details-control-body">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title">School Details</h3>
                </div>
                <div class="panel-body">
                    <dl class="row">
                        <dt class="col-sm-2 text-right">Description:</dt>
                        <dd class="col-sm-10">@item.Description</dd>
                    </dl>
                </div>
                <div class="panel-body">
                    <dl class="row">
                        <dt class="col-sm-2 text-right">Address:</dt>
                        <dd class="col-sm-10">@item.Address (@item.AddressComment)</dd>
                    </dl>
                </div>
                <div class="panel-body">
                    <dl class="row">
                        <dt class="col-sm-2 text-right">Working hours:</dt>
                        <dd class="col-sm-10">@item.WorkingHours</dd>
                    </dl>
                </div>
                <div class="panel-body">
                    <dl class="row">
                        <dt class="col-sm-2 text-right">MailIndex</dt>
                        <dd class="col-sm-10">@item.MailIndex</dd>
                    </dl>
                </div>
                <div class="panel-body">
                    <dl class="row">
                        <dt class="col-sm-2 text-right">URL:</dt>
                        <dd class="col-sm-10">@item.TwoGisUrl</dd>
                    </dl>
                </div>
            </div>
        </div>
    </Template>
    <Columns>
        <RadzenDataGridColumn TItem="OrganizationEntity" Title="Actions" Width="10ex" MinWidth="10ex" Resizable="false"
                              Sortable="false" Filterable="false">
            <Template Context="school">
                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(_ => OnDeleteSchool(school))"/>
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Danger" Click="@(_ => OnEditSchool(school))"/>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="OrganizationEntity" Title="Name" Property="@nameof(OrganizationEntity.Name)" Filterable="true"/>
        <RadzenDataGridColumn TItem="OrganizationEntity" Title="Location" Property="@nameof(OrganizationEntity.Location)" Filterable="false"/>
    </Columns>
</RadzenDataGrid>

@code {
    [Inject] NotificationService Notifications { get; set; }
    [Inject] DialogService DialogService { get; set; }
    [Inject] MyGeoDbContext DbCOntext { get; set; }
    [Inject] ISchoolsService SchoolsService { get; set; }
    
    private IEnumerable<OrganizationEntity> _schools;
    private int _count;
    bool isLoading;
    private RadzenDataGrid<OrganizationEntity> _grid;

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        var query = DbCOntext.Organizations.Where(_ => _.Type == OrganizationTypes.School).Include(_ => _.City).AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        _count = query.Count();
        _schools = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
        
        isLoading = false;
    } 

    private Task<object> OnAddSchoolOpen()
    {
        DialogService.OnClose += OnAddSchoolClosed;
        return CreateSchoolDialog.OpenAsync(DialogService);
    }

    private void OnAddSchoolClosed(object obj)
    {
        DialogService.OnClose -= OnAddSchoolClosed;
        if (obj != null) _grid.Reload();
    }

    private void OnExportToCSV()
    {
        Notifications.Notify(NotificationSeverity.Info, "Not implemented yet =<");
    }

    private async Task OnDeleteSchool(OrganizationEntity organization)
    {
        var confirm = await DialogService.Confirm("Are you sure?", "Delete School", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirm != true) return;
        try
        {
            await SchoolsService.DeleteSchoolAsync(organization.Id);
        }
        catch (Exception e)
        {
            Notifications.Notify(NotificationSeverity.Error, "Failed to delete school");
        }
        finally
        {
            _grid.Reload();
        }
    }

    private async Task OnEditSchool(OrganizationEntity organization)
    {
        Notifications.Notify(NotificationSeverity.Info, "Not implemented yet =<");
    }
}